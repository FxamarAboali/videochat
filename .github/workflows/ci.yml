name: CI jobs

on:
  push:

jobs:
  aaa:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Install software
        if: env.SHOULD_RUN == 'true'
        run: |
          mkdir -p ${HOME}/bin && curl https://raw.githubusercontent.com/vishnubob/wait-for-it/8ed92e8cab83cfed76ff012ed4a36cef74b28096/wait-for-it.sh > ${HOME}/bin/wait-for-it.sh && chmod +x ${HOME}/bin/wait-for-it.sh
      - name: Set up JDK 17
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: liberica
          java-version: 17.0.4
      - name: Cache local Maven repository
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: | 
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '**/.mvn/wrapper/maven-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Start & wait docker-compose environment
        if: env.SHOULD_RUN == 'true'
        run: |
          docker-compose up -d postgresql redis rabbitmq jaeger
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:35432 -- echo 'postgres is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36379 -- echo 'redis is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36672 -- echo 'rabbitmq is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:6831 -- echo 'jaeger is up'
          docker-compose -f docker-compose.keycloak.yml up -d keycloak
          sleep 15 && ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:8484 -- echo 'keycloak is up'
      - name: Build and test with Maven
        if: env.SHOULD_RUN == 'true'
        run: |
          (cd aaa; make check-env clean download package test)
      - name: Deploy docker image to server
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          (
            mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
            chmod 600 ~/.ssh/id_rsa
            cd aaa; 
            export CONNECT_LINE=${{secrets.ConnectLine}}
            make push-docker-image-to-server deploy-docker-image
          )
      - name: Push docker image to registry
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}" 
          (cd aaa; make push-docker)

  frontend:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Node.js
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.0
      - name: Cache Node.js dependencies
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-frontend-cache-v2-${{ hashFiles('**/package-lock.json') }}
      - name: Build with npm run
        if: env.SHOULD_RUN == 'true'
        run: |
          (cd frontend; make check-env clean clean-cache download package)
      - name: Deploy docker image to server
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          (
            mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
            chmod 600 ~/.ssh/id_rsa
            cd frontend; 
            export CONNECT_LINE=${{secrets.ConnectLine}}
            make push-docker-image-to-server deploy-docker-image
          )
      - name: Push docker image to registry
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}" 
          (cd frontend; make push-docker)

  chat:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3
        if: env.SHOULD_RUN == 'true'
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-chat-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install software
        if: env.SHOULD_RUN == 'true'
        run: |
          mkdir -p ${HOME}/bin && curl https://raw.githubusercontent.com/vishnubob/wait-for-it/8ed92e8cab83cfed76ff012ed4a36cef74b28096/wait-for-it.sh > ${HOME}/bin/wait-for-it.sh && chmod +x ${HOME}/bin/wait-for-it.sh
      - name: Start & wait docker-compose environment
        if: env.SHOULD_RUN == 'true'
        run: |
          docker-compose up -d postgresql redis rabbitmq
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:35432 -- echo 'postgres is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36379 -- echo 'redis is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36672 -- echo 'rabbitmq is up'
      - name: Build and test with make
        if: env.SHOULD_RUN == 'true'
        run: (cd chat; sleep 5 && make check-env clean download generate test package)

      - name: Deploy docker image to server
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          (
            mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
            chmod 600 ~/.ssh/id_rsa
            cd chat; 
            export CONNECT_LINE=${{secrets.ConnectLine}}
            make push-docker-image-to-server deploy-docker-image
          )
      - name: Push docker image to registry
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}" 
          (cd chat; make push-docker)

  event:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3
        if: env.SHOULD_RUN == 'true'
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-event-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build and test with make
        if: env.SHOULD_RUN == 'true'
        run: (cd event; make check-env clean download generate test package)
      - name: Build docker image and deploy
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}"
          (cd event; make push-docker && echo "Will deploy event" && ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.EventUpdateCommand }} )

  notification:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3
        if: env.SHOULD_RUN == 'true'
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-notification-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build and test with make
        if: env.SHOULD_RUN == 'true'
        run: (cd notification; make check-env clean download generate test package)
      - name: Build docker image and deploy
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}"
          (cd notification; make push-docker && echo "Will deploy notification" && ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.NotificationUpdateCommand }} )

  storage:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3
        if: env.SHOULD_RUN == 'true'
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-storage-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build and test with make
        if: env.SHOULD_RUN == 'true'
        run: (cd storage; make check-env clean download generate test package)
      - name: Build docker image and deploy
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}"
          (cd storage; make push-docker && echo "Will deploy storage" && ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.StorageUpdateCommand }} )

  video:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD ${GITHUB_JOB} ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - uses: actions/cache@v3
        if: env.SHOULD_RUN == 'true'
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-video-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build and test with make
        if: env.SHOULD_RUN == 'true'
        run: (cd video; make check-env clean download generate test package)
      - name: Build docker image and deploy
        if: env.SHOULD_RUN == 'true' && github.ref == 'refs/heads/master'
        run: |
          mkdir -p ~/.ssh && openssl aes-256-cbc -K ${{ secrets.EncryptedKey }} -iv ${{ secrets.EncryptedIv }} -in ./.secret_keys/id_rsa.enc -out ~/.ssh/id_rsa -d
          chmod 600 ~/.ssh/id_rsa
          echo "Will login to docker" &&
          docker login -u="nkonev" -p="${{ secrets.DockerPassword }}"
          (cd video; make push-docker && echo "Will deploy video" && ssh -o "BatchMode yes" -o StrictHostKeyChecking=no -q ${{ secrets.ConnectLine }} ${{ secrets.VideoUpdateCommand }} )

  e2e-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
      - name: Decide should we build it
        run: ./should-run.sh HEAD 'frontend|aaa|chat|event|e2e-test' ${{ secrets.WebSitePrefix }} && echo "SHOULD_RUN=true" >> "$GITHUB_ENV" || echo "SHOULD_RUN=false" >> "$GITHUB_ENV"
      - name: Install software
        if: env.SHOULD_RUN == 'true'
        run: |
          mkdir -p ${HOME}/bin && curl https://raw.githubusercontent.com/vishnubob/wait-for-it/8ed92e8cab83cfed76ff012ed4a36cef74b28096/wait-for-it.sh > ${HOME}/bin/wait-for-it.sh && chmod +x ${HOME}/bin/wait-for-it.sh

      - name: Set up JDK 17
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: liberica
          java-version: 17.0.4
      - name: Cache local Maven repository
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '**/.mvn/wrapper/maven-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/setup-node@v3
        if: env.SHOULD_RUN == 'true'
        with:
          node-version: 18.16.0
      - name: Cache Playwright browsers and Node.js dependencies
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-v0-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright Node.js dependencies
        if: env.SHOULD_RUN == 'true'
        run: (cd e2e-test; npm ci)
      - name: Install Playwright browsers
        if: env.SHOULD_RUN == 'true'
        run: (cd e2e-test; npx playwright install)
      - name: Cache frontend Node.js dependencies
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-frontend-cache-v2-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Go
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Cache go modules
        if: env.SHOULD_RUN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-e2e-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Start and wait docker-compose
        if: env.SHOULD_RUN == 'true'
        run: |
          docker-compose up -d postgresql redis rabbitmq jaeger minio traefik
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:35432 -- echo 'postgres is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36379 -- echo 'redis is up'
          sleep 5 && ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:36672 -- echo 'rabbitmq is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:16686 -- echo 'jaeger web ui is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:9000 -- echo 'minio is up'
          ${HOME}/bin/wait-for-it.sh -t 30 127.0.0.1:8081 -- echo 'traefik is up'
      - name: Build microservices
        if: env.SHOULD_RUN == 'true'
        run: |
          (cd aaa; make check-env clean download package-java)
          (cd frontend; make check-env clean download package)
          (cd chat; make check-env clean download generate package-go)
          (cd event; make check-env clean download generate package-go)
      - name: Run microservices
        if: env.SHOULD_RUN == 'true'
        run: |
          (cd aaa; ./run-with-oauth2.sh &)
          (cd chat; ./chat &)
          (cd event; ./event &)
          # Using port 3000 we mimic to Vite's npm run dev
          (docker run --rm -p 3000:8082 nkonev/chat-frontend:latest &)
      - name: Wait for microservices
        if: env.SHOULD_RUN == 'true'
        run: |
          ${HOME}/bin/wait-for-it.sh -t 40 127.0.0.1:8060 -- echo 'aaa is up' # because aaa creates schema
          ${HOME}/bin/wait-for-it.sh -t 40 127.0.0.1:1235 -- echo 'chat is up'
          ${HOME}/bin/wait-for-it.sh -t 40 127.0.0.1:1238 -- echo 'event is up'
          ${HOME}/bin/wait-for-it.sh -t 40 127.0.0.1:3000 -- echo 'front is up'
          # Once we started aaa (compiling) we start the emulator
          (cd aaa; ./run-oauth2-emu.sh &)
          ${HOME}/bin/wait-for-it.sh -t 40 127.0.0.1:9080 -- echo 'oauth2 emulator controller is up'
      - name: Run your Playwright tests
        if: env.SHOULD_RUN == 'true'
        run: (cd e2e-test; npx playwright test)
      - name: Upload test results
        if: env.SHOULD_RUN == 'true' && always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results
          path: e2e-test/test-results
